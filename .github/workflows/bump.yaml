name: Bump version

on:
  workflow_dispatch:
    inputs:
      bump_rule:
        type: choice
        description: How to bump the project's version
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease
        required: true

jobs:
  bump_version:
    name: "Bump version and create changelog"
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_EMAIL: "ci-runner@wordplex.invalid"
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: "${{ secrets.PERSONAL_ACCESS_TOKEN }}"

      # towncrier imports the package as part of building so we have to
      # install the package (to keep things slim, we only install the main
      # dependencies, which also means that we get a test that we can import
      # the package with only the compulsory dependencies installed for free)
      - uses: ./.github/actions/setup
        with:
          python-version: "3.11"
          venv-id: "bump"

      - name: Install towncrier
        run: |
          uv pip install towncrier

      - name: Create bump and changelog

        run: |
          # Get current version from pyproject.toml
          BASE_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          
          # Determine new version based on bump rule
          IFS='.' read -r major minor patch <<< "$BASE_VERSION"
          case "${{ github.event.inputs.bump_rule }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
            *)
              echo "Unsupported bump rule for automated versioning: ${{ github.event.inputs.bump_rule }}"
              exit 1
              ;;
          esac
          
          # Update version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # Build changelog
          uv run towncrier build --yes --version v$NEW_VERSION

          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email "$CI_COMMIT_EMAIL"

          git commit -a -m "bump: version $BASE_VERSION -> $NEW_VERSION"
          git tag v$NEW_VERSION
          git push && git push --tags
          echo "Bumped to version $NEW_VERSION"
